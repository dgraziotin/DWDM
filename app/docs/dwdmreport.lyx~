#LyX 2.0.0beta1 created this file. For more info see http://www.lyx.org/
\lyxformat 407
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_xetex false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Data Mining Project PT.
 2 - k-means and DBSCAN analysis and implementation
\end_layout

\begin_layout Author
Daniel Hanspeter, 6129 Daniel Graziotin, 4801 Thomas Schievenin, 5701
\end_layout

\begin_layout Abstract
This report is on the development and analysis of two Data Mining clustering
 algorithms, namely k-means clustering and DBSCAN, within an interactive
 graphical program in Java programming language.
 This report is dived in three parts.
 In the first part we will present a usage section, explaining how to interact
 with the program.
 We will then introduce the architecture of the system, explaining our implement
ation in detail.
 In the third part we will present our analysis of the algorithms
\end_layout

\begin_layout Section
Usage
\end_layout

\begin_layout Section
Architecture
\end_layout

\begin_layout Standard
For implementing the system we decided to follow a personalized Model-View-Contr
oller design pattern, that we name 
\begin_inset Quotes eld
\end_inset

MVA
\begin_inset Quotes erd
\end_inset

, or Model-View-Algorithm, respectively mapped in the Java packages 
\series bold
types
\series default
, 
\series bold
gui
\series default
 and 
\series bold
algorithms.
 
\series default
This is for a better separation of concerns.
 Figure 2.1 illustrates with a very simple scheme our general view of the
 architecture of the system.
 It is a personalized version of the MVC pattern because we further separated
 the algorithms from the controller part, putting the non algorithm-related
 code in the gui package anyway.
 
\series bold
 
\series default
The user interacts only with the gui component that, based on user input,
 calls the components of the algorithms package that will do some computation
 on data defined in the types package and return the result.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename MAC.jpg
	width 70col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
General Architecture View of the System
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The gui package contains the Main class that is responsible for accessing
 the program and constructing the graphical user interface using Swing.
 The Jintfilter is a specialization of Swing's Document object and is used
 for filtering user input on algorithm parameters.
 The OpenFileDialog class is a personalized dialog for opening the datasets,
 in ARFF format.
 The ProgressGui class is responsible for creating a window containing the
 status and progress of the operations.
 The TaskManager class is a wrapper for creating threads that contain the
 algorithm tasks.
\end_layout

\begin_layout Standard
The algorithms package, better illustrated in Figure 2.1, contains the pure,
 type independant implementations of the clustering algorithms, k-means
 and DBSCAN.
 They make use of generalized data types defined in the types package, in
 order to have an abstraction of the data that could be loaded from any
 datasource, being it an ARFF file, a CSV, and XML or a Database.
 The Utility class actually contains the method for loading the datasets
 and converting them in objects declared in types package.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /Users/bodom_lx/Projects/DWDM/app/docs/Algorithms.jpg
	width 80page%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Algorithms Package
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The types package, represented in Figure 2.3, contains pure Java representation
 of the data that can be loaded by the algorithms.
 They are an abstract representation of an ARFF file but they are completely
 independent from their structure.
 They act as wrappers for the algorithm and it would be a matter of changing
 the Utility.loadDataSet() method for loading any kind of data format.
 The DataSet class represents a data format, e.g.
 a dataset, that is composed by rows, defined in Row class.
 The other classes are related to the algorithm own data types, for example
 Cluster and Centroid.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename types_details.jpg
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Types Package
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the code has been clearly documented using Javadoc documentation.
 For a deep understanding of the functioning of each method, please see
 the attached archive file containing the HTML exported documentation.
\end_layout

\begin_layout Standard
Regarding the additional method we created in order to achieve the results,
 they are all documented in the code and in the documentation, but we will
 mention here two of theme.
 The first one is a method for removing noise from the datasets.
 It begins at line 143 of it.unibz.algorithms.KMeans.
 It is inspired by Barca, J.C.
 Rumantir, G.
 - A Modified K-means Algorithm for Noise Reduction in Optical Motion Capture
 Data.
 Since we are showing the feature, we don't remove the noisy clusters but
 flag them as noisy.
 It's up to the user whether to use them or ignore them.
 The following is a snippet of the code responsible for noise removal:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Find corners of compactness based on instances with
\end_layout

\begin_layout Plain Layout

// minimum and maximum X and Y values
\end_layout

\begin_layout Plain Layout

compactness = clusters.get(j).getNumInstances() / (clusters.get(j).getNumOfMinAndMax
XY());
\end_layout

\begin_layout Plain Layout

// Calculate cluster compactness, that is number of data points / compactness
 window size
\end_layout

\begin_layout Plain Layout

if (compactness > instances.size() / clusters.size())
\end_layout

\begin_layout Plain Layout

	clusters.get(j).setIsnoise(true);
\end_layout

\begin_layout Plain Layout

else
\end_layout

\begin_layout Plain Layout

	clusters.get(j).setIsnoise(false);
\end_layout

\end_inset


\end_layout

\begin_layout Section
Analysis
\end_layout

\end_body
\end_document
