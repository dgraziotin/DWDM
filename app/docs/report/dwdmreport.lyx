#LyX 2.0.0beta1 created this file. For more info see http://www.lyx.org/
\lyxformat 407
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_xetex false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Data Mining Project PT.
 2 - k-means and DBSCAN analysis and implementation
\end_layout

\begin_layout Author
Daniel Hanspeter, 6129 Daniel Graziotin, 4801 Thomas Schievenin, 5701
\end_layout

\begin_layout Abstract
This report is on the development and analysis of two Data Mining clustering
 algorithms, namely k-means clustering and DBSCAN, within an interactive
 graphical program in Java programming language.
 This report is dived in three parts.
 In the first part we will present a usage section, explaining how to interact
 with the program.
 We will then introduce the architecture of the system, explaining our implement
ation in detail.
 In the third part we will present our analysis of the algorithms
\end_layout

\begin_layout Section
Getting Started
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
The DWDM Project part II consists in implementing some Data Mining algorithms
 to get a deeper understanding of their behavior, their strengths and their
 weaknesses.
 We choosed to implement the K-Means and the DB-Scan algorithms performing
 the same task and then we compared their behaviours.
\end_layout

\begin_layout Subsection
Running the application for the first time
\end_layout

\begin_layout Standard
First, launch the JAR file.
 This can be done either by double clicking on the JAR file or by executing
 the below command in a console window:
\end_layout

\begin_layout Standard
\align center
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

java -jar dmproject.jar
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Our application is tested and supported for Windows XP and Windows 7.
 There are litte unexpected behaviors when running it under Mac Os X but
 they are all related to the graphical implementation of the project: the
 functionalities seem working fine anyway.
 There are bigger issues with Gnu/Linux, all related to the graphical implementa
tion: some functionalities will not run.
\end_layout

\begin_layout Subsection
Quick overview
\end_layout

\begin_layout Standard
As the application starts all features are disabled.
 This is because there is not a dataset loaded yet.
 The application is composed by the following parts:
\end_layout

\begin_layout Enumerate
Select Box Attributes: the user gets the possibility to select the attributes
 on which the algoritms will perform their calculations;
\end_layout

\begin_layout Enumerate
Preferred Algorithm: the user decides which algorithm to perform;
\end_layout

\begin_layout Enumerate
Parameters: in case of K-Means algorithm selected, the available parameters
 to set are the number of clusters, the number of iterations and whether
 to take care of noise.
 If the DB-Scan algorithm is selected, we have to specify only the values
 for E-Neighbours and Min-Points;
\end_layout

\begin_layout Enumerate
Dataset information: the program displays the number of rows loaded into
 memory and the number of skipped rows because of missing values;
\end_layout

\begin_layout Enumerate
Execute: this bottom executes the selected algorithm;
\end_layout

\begin_layout Enumerate
Output: algorithms' outcome.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/bodom_lx/Projects/DWDM/app/docs/report/img/00_overview.png
	lyxscale 30
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Quick overview
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
How to run K-Means algorithm
\end_layout

\begin_layout Standard
The steps for running the K-Means algorithm are the following:
\end_layout

\begin_layout Itemize
First we need to load our dataset into the memory.
 This can be done by clicking on menu File > Open, then select either 
\begin_inset Quotes eld
\end_inset

census-income.arff
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

blood-transfusion
\begin_inset Quotes erd
\end_inset

.arff provided as attachment.
 Note, the loading windows allows to import only arff file, otherwise our
 parser is not able to parse its content.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/bodom_lx/Projects/DWDM/app/docs/report/img/01_loading.png
	lyxscale 30
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Open window
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Important: while importing the dataset, the application checks wheter missing
 values are present.
 This information will be diplayed later in the 
\begin_inset Quotes eld
\end_inset

DataSet information
\begin_inset Quotes erd
\end_inset

 section described before.
 In case of a dataset with missing values in every row, the application
 informs the user that it has no data for running the algorithms.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/bodom_lx/Projects/DWDM/app/docs/report/img/02_popup.png
	lyxscale 30
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
No data popup
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Once the dataset has been loaded, we can decide on which attributes to perform
 the K-Means algorithm.
 We selected as attributes 
\begin_inset Quotes eld
\end_inset

age
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

relationship
\begin_inset Quotes erd
\end_inset

, 2 clusters and 2 iterations.
 We also wanted to take care of the noise.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/bodom_lx/Projects/DWDM/app/docs/report/img/03_layout.png
	lyxscale 30
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Selecting attributes
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Click the Execute button;
\end_layout

\begin_layout Itemize
In case of big dataset size, the execution of the K-Means algorithm takes
 a while.
 For this reason we implemented a progress bar to inform the user how long
 the execution is going to take.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/bodom_lx/Projects/DWDM/app/docs/report/img/04_progressbar.png
	lyxscale 30
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Progress bar
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Once the progress bar finishes, the user sees the outcome of the K-Means
 algorighm:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/bodom_lx/Projects/DWDM/app/docs/report/img/05_output.png
	lyxscale 30
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
K-Means outcome
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
How to run DB-Scan algorigthm
\end_layout

\begin_layout Standard
The steps for executing the DB-Scan algorithm are basically the same of
 the K-Means algorithm.
 The only things that changen are the parameters to set.
 In fact, we have to specify the number of E-Neighbors and the number of
 MinPoints.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/bodom_lx/Projects/DWDM/app/docs/report/img/06_dbscan.png
	lyxscale 30
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
DB-Scan Algorithm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Architecture
\end_layout

\begin_layout Standard
For implementing the system we decided to follow a personalized Model-View-Contr
oller design pattern, that we name 
\begin_inset Quotes eld
\end_inset

MVA
\begin_inset Quotes erd
\end_inset

, or Model-View-Algorithm, respectively mapped in the Java packages 
\series bold
types
\series default
, 
\series bold
gui
\series default
 and 
\series bold
algorithms.
 
\series default
This is for a better separation of concerns.
 Figure 2.1 illustrates with a very simple scheme our general view of the
 architecture of the system.
 It is a personalized version of the MVC pattern because we further separated
 the algorithms from the controller part, putting the non algorithm-related
 code in the gui package anyway.
 
\series bold
 
\series default
The user interacts only with the gui component that, based on user input,
 calls the components of the algorithms package that will do some computation
 on data defined in the types package and return the result.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/MAC.jpg
	width 70col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
General Architecture View of the System
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The gui package contains the Main class that is responsible for accessing
 the program and constructing the graphical user interface using Swing.
 The Jintfilter is a specialization of Swing's Document object and is used
 for filtering user input on algorithm parameters.
 The OpenFileDialog class is a personalized dialog for opening the datasets,
 in ARFF format.
 The ProgressGui class is responsible for creating a window containing the
 status and progress of the operations.
 The TaskManager class is a wrapper for creating threads that contain the
 algorithm tasks.
\end_layout

\begin_layout Standard
The algorithms package, better illustrated in Figure 2.1, contains the pure,
 type independant implementations of the clustering algorithms, k-means
 and DBSCAN.
 They make use of generalized data types defined in the types package, in
 order to have an abstraction of the data that could be loaded from any
 datasource, being it an ARFF file, a CSV, and XML or a Database.
 The Utility class actually contains the method for loading the datasets
 and converting them in objects declared in types package.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/Algorithms.jpg
	width 80page%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Algorithms Package
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The types package, represented in Figure 2.3, contains pure Java representation
 of the data that can be loaded by the algorithms.
 They are an abstract representation of an ARFF file but they are completely
 independent from their structure.
 They act as wrappers for the algorithm and it would be a matter of changing
 the Utility.loadDataSet() method for loading any kind of data format.
 The DataSet class represents a data format, e.g.
 a dataset, that is composed by rows, defined in Row class.
 The other classes are related to the algorithm own data types, for example
 Cluster and Centroid.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename img/types_details.jpg
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Types Package
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
All the code has been clearly documented using Javadoc documentation.
 For a deep understanding of the functioning of each method, please see
 the attached archive file containing the HTML exported documentation.
\end_layout

\begin_layout Standard
Regarding the additional method we created in order to achieve the results,
 they are all documented in the code and in the documentation, but we will
 mention here two of theme.
 The first one is a method for removing noise from the datasets.
 It begins at line 143 of it.unibz.algorithms.KMeans.
 It is inspired by Barca, J.C.
 Rumantir, G.
 - A Modified K-means Algorithm for Noise Reduction in Optical Motion Capture
 Data.
 
\end_layout

\begin_layout Standard
In order to take care of noise, we don’t reduce it before executing the
 algorithm, but we added an additional check during the execution.
 On every end of iteration, we try to find out how compact a cluster is.
 If instances inside a cluster overcome the average compactness of the clusters
 in the dataset, this cluster is flagged as noise.
 In modification to the classical K-means algorithm, we try to add an automatic
 determination of the optimum number of clusters we should have.
 A cluster is considered noise if it only has a few instances in it.
 The minimum number of instances in a cluster, or the cluster size, are
 set such that it minimizes the degree of false positives (i.e.
 data clusters incorrectly classified as noise) and false negatives (i.e.
 noise clusters incorrectly classified as data).
 The following is a code snippet that handles the problem:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Find corners of compactness based on instances with
\end_layout

\begin_layout Plain Layout

// minimum and maximum X and Y values
\end_layout

\begin_layout Plain Layout

compactness = clusters.get(j).getNumInstances() / (clusters.get(j).getNumOfMinAndMax
XY());
\end_layout

\begin_layout Plain Layout

// Calculate cluster compactness, that is number of data points / compactness
 window size
\end_layout

\begin_layout Plain Layout

if (compactness > instances.size() / clusters.size())
\end_layout

\begin_layout Plain Layout

	clusters.get(j).setIsnoise(true);
\end_layout

\begin_layout Plain Layout

else
\end_layout

\begin_layout Plain Layout

	clusters.get(j).setIsnoise(false);
\end_layout

\end_inset


\end_layout

\begin_layout Section
Analysis
\end_layout

\begin_layout Subsection
Comparison of the algorithms
\end_layout

\begin_layout Standard
Two clustering algorithms - namely the k-means and the DBSCAN - were examined
 and their clustering performances were compared.
 First of all, in the DBSCAN algorithm the user does not have to specify
 the K value, which drastically affects the outcome in the K-means algorithm.
 The DBSCAN deals with noise data and outliers.
 On the other hand, the K-Means algorithm is affected by noisy data.
 Additionally, in the DBSCAN the ordering of the points in the database
 is not so important.
 We found that the DBSCAN algorithm has a superior performance.
\end_layout

\begin_layout Subsection
An algorithms analysis
\end_layout

\begin_layout Subsubsection
K-Means Properties
\end_layout

\begin_layout Itemize
Pro: k-means is relatively scalable and efficient in processing large data
 sets
\end_layout

\begin_layout Itemize
Pro: the computation complexity of the algorithm is O(objects*clusters*iteration
s)
\end_layout

\begin_layout Itemize
Con: it can be applied only when the mean of a cluster is defined
\end_layout

\begin_layout Itemize
Con: the user must specify a value for K parameter
\end_layout

\begin_layout Itemize
Con: it is not suitable for discovering clusters with nonconvex shapes or
 clusters of very different size
\end_layout

\begin_layout Itemize
Con: it is sensitive to noise and outlier data points (can influence the
 mean value).
\end_layout

\begin_layout Subsubsection
DB-Scan Properties
\end_layout

\begin_layout Itemize
Pro: it does not force you to choose the number of clusters in the data
 a priori, as opposed to k-means
\end_layout

\begin_layout Itemize
Pro: it can find arbitrarily shaped clusters.
 It finds clusters completely surrounded by a different cluster
\end_layout

\begin_layout Itemize
Pro: it considers noisy values
\end_layout

\begin_layout Itemize
Pro: it requires just two parameters for working
\end_layout

\begin_layout Itemize
Pro: it is mostly insensitive to the ordering of the points in the database
\end_layout

\begin_layout Itemize
Con: the distance measure in the function for finding neighbours is crucial.
 We used the euclidean distance measure and especially for high-dimensional
 data, this distance metric can be rendered almost useless
\end_layout

\begin_layout Itemize
Con: varying densities affects the outcome of this algorithm (hierarchical
 data sets)
\end_layout

\begin_layout Subsection
Benchmarking the algorithms (AMD Phenom 9600 Quad Core 2.6Ghz)
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DataSet Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
K-Means (20 Clusters, 2 Iterations)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
K-Means (20 C, 2 I, Noise removal)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DBScan (5 as E, 20 as MinPoints)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BT (748 Rows)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.5 ms
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5 ms
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7 ms
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BT*2 (1496 Rows)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30 ms
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
33 ms
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3 Sec 498 ms
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CI/2 (15124 Rows)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3 Min 40 sec
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4 Min 14 sec
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2 Min 04 sec
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CI (27763 Rows)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9 Min 19 sec
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10 min 40 sec
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4 Min 18 sec
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_body
\end_document
